/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const TheoryIndexLazyImport = createFileRoute('/theory/')()
const ResourcesIndexLazyImport = createFileRoute('/resources/')()
const NewsIndexLazyImport = createFileRoute('/news/')()
const LabsIndexLazyImport = createFileRoute('/labs/')()
const LabsLab2LazyImport = createFileRoute('/labs/lab2')()
const LabsLab1LazyImport = createFileRoute('/labs/lab1')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TheoryIndexLazyRoute = TheoryIndexLazyImport.update({
  id: '/theory/',
  path: '/theory/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/theory/index.lazy').then((d) => d.Route))

const ResourcesIndexLazyRoute = ResourcesIndexLazyImport.update({
  id: '/resources/',
  path: '/resources/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/resources/index.lazy').then((d) => d.Route),
)

const NewsIndexLazyRoute = NewsIndexLazyImport.update({
  id: '/news/',
  path: '/news/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/news/index.lazy').then((d) => d.Route))

const LabsIndexLazyRoute = LabsIndexLazyImport.update({
  id: '/labs/',
  path: '/labs/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/labs/index.lazy').then((d) => d.Route))

const LabsLab2LazyRoute = LabsLab2LazyImport.update({
  id: '/labs/lab2',
  path: '/labs/lab2',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/labs/lab2.lazy').then((d) => d.Route))

const LabsLab1LazyRoute = LabsLab1LazyImport.update({
  id: '/labs/lab1',
  path: '/labs/lab1',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/labs/lab1.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/labs/lab1': {
      id: '/labs/lab1'
      path: '/labs/lab1'
      fullPath: '/labs/lab1'
      preLoaderRoute: typeof LabsLab1LazyImport
      parentRoute: typeof rootRoute
    }
    '/labs/lab2': {
      id: '/labs/lab2'
      path: '/labs/lab2'
      fullPath: '/labs/lab2'
      preLoaderRoute: typeof LabsLab2LazyImport
      parentRoute: typeof rootRoute
    }
    '/labs/': {
      id: '/labs/'
      path: '/labs'
      fullPath: '/labs'
      preLoaderRoute: typeof LabsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/news/': {
      id: '/news/'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof NewsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/resources/': {
      id: '/resources/'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/theory/': {
      id: '/theory/'
      path: '/theory'
      fullPath: '/theory'
      preLoaderRoute: typeof TheoryIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/labs/lab1': typeof LabsLab1LazyRoute
  '/labs/lab2': typeof LabsLab2LazyRoute
  '/labs': typeof LabsIndexLazyRoute
  '/news': typeof NewsIndexLazyRoute
  '/resources': typeof ResourcesIndexLazyRoute
  '/theory': typeof TheoryIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/labs/lab1': typeof LabsLab1LazyRoute
  '/labs/lab2': typeof LabsLab2LazyRoute
  '/labs': typeof LabsIndexLazyRoute
  '/news': typeof NewsIndexLazyRoute
  '/resources': typeof ResourcesIndexLazyRoute
  '/theory': typeof TheoryIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/labs/lab1': typeof LabsLab1LazyRoute
  '/labs/lab2': typeof LabsLab2LazyRoute
  '/labs/': typeof LabsIndexLazyRoute
  '/news/': typeof NewsIndexLazyRoute
  '/resources/': typeof ResourcesIndexLazyRoute
  '/theory/': typeof TheoryIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/labs/lab1'
    | '/labs/lab2'
    | '/labs'
    | '/news'
    | '/resources'
    | '/theory'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/labs/lab1'
    | '/labs/lab2'
    | '/labs'
    | '/news'
    | '/resources'
    | '/theory'
  id:
    | '__root__'
    | '/'
    | '/labs/lab1'
    | '/labs/lab2'
    | '/labs/'
    | '/news/'
    | '/resources/'
    | '/theory/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LabsLab1LazyRoute: typeof LabsLab1LazyRoute
  LabsLab2LazyRoute: typeof LabsLab2LazyRoute
  LabsIndexLazyRoute: typeof LabsIndexLazyRoute
  NewsIndexLazyRoute: typeof NewsIndexLazyRoute
  ResourcesIndexLazyRoute: typeof ResourcesIndexLazyRoute
  TheoryIndexLazyRoute: typeof TheoryIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LabsLab1LazyRoute: LabsLab1LazyRoute,
  LabsLab2LazyRoute: LabsLab2LazyRoute,
  LabsIndexLazyRoute: LabsIndexLazyRoute,
  NewsIndexLazyRoute: NewsIndexLazyRoute,
  ResourcesIndexLazyRoute: ResourcesIndexLazyRoute,
  TheoryIndexLazyRoute: TheoryIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/labs/lab1",
        "/labs/lab2",
        "/labs/",
        "/news/",
        "/resources/",
        "/theory/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/labs/lab1": {
      "filePath": "labs/lab1.lazy.tsx"
    },
    "/labs/lab2": {
      "filePath": "labs/lab2.lazy.tsx"
    },
    "/labs/": {
      "filePath": "labs/index.lazy.tsx"
    },
    "/news/": {
      "filePath": "news/index.lazy.tsx"
    },
    "/resources/": {
      "filePath": "resources/index.lazy.tsx"
    },
    "/theory/": {
      "filePath": "theory/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
